GIT Essential Training - my remarks
-----------------------------------


Initial setup and configuration:
********************************
which git
git version
git config --list
git config --global user.name "Peter Nemcek"
git config --global user.email "peter.nemcek@icloud.com"
git config --global core.editor 'vi'
git config --global core.excludesfile ~/.gitignore_global		# globaly ignore files in all projects
.gitignore														# list of files to be ignored
cat .gitconfig
cat .gitignore_global

How to show the branch in command prompt:
*****************************************
# Add the following lines of code to ~/.bash_profile
parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "

Git initiation and changing files
*********************************
git init  										# inside project folder initiate repository with this comand
												# create a new file within the repo folder, then
git add .										# add all files for staging
git add [filename]								# ads just the <filename> for staging
git commit -m "message"							# commit the stage index to repository
git commit -am "message"						# makes git add + git commit at once
git commit --amend -m "message" 				# adds commit to the same last commit

How to commits/changes management
************************************
git log											# shows the whole commit log
git log -n 5									# shows the recent 5 log items
git log --since=2019-01-15						# shows the required period
git log --until=2019-01-15						# shows the required period
git log --author="Janko Hrasko"					# shows just the author's entries
git log --grep="string..."						# shows the grep results
git log --oneline								# most recently used git log report
git log --oneline -4							# shows the last 4 merges
git log <hash>.. <filename>						
git log -p <hash>.. <filename>
git log --graph --online --decorate --all 		# shows the graphical results
git show <hash> 								# display the result for the hash entry
git status 										# display actual status
git reset HEAD <file>       					# to unstage file before commit
git diff										# differencies in the working directory
git diff <filename>
git diff --color-worlds <filename>
git diff --staged								# differencies in the staging index/directory
git rm <filename>								# delete the <filename>. Also can be done on the system level
git commit -m "file deleted"
git mv <from_filename> <to_filename>			# rename with git the filename <from_filename> <to_filename>  Also could be done on the system level
git checkout <prev_hash> -- <filename>			# reverts the <filename> to previous hash version
git revert <last_hash>							# will do the exactly opposite commit as in the <last_hash>
git reset --soft <hash_value>					# most no-destructive moving of the HEADER pointer
git reset --mixed <hash_value>					# manipulates the index stage 
git reset --hard <hash_value>					# get working dir and index stage to back point !!!!!
git clean -n / -f 								#remove untracked files from th repository

How to GIT branch
******************
git branch --merged								# shows all other branches, that current branch includes
git branch -m <OldBranchName> <NewBranchName>	# rename <OldBranchName> to <NewBranchName>
git branch -d <branch_to_delete>				# how to delete branch [-d soft delete, -D hard delete]
git branch -b <new_branch_name>					# create <new_branch_name> and switch there
git merge <feature_branch>						# on the master branch run this to merge the code from the <feature_branch>
git merge --no-ff <feature_branch>				# no fast forward <feature_branch> merge to master branch
git merge --ff-only <feature_branch>			# do a merge only if you can do a fast formard merge
git merge <feature_branch>						# true merge
git branch --merged								# shows all branches merged into the master
git branch -r 									# shows the remote branch
git branch -a 									# shows the remote branch and the local branch

How to 3 ways of solving merge conflicts
****************************************
git merge --abort								# 1. option - abort merging conflict
git add <filename>								# 2. option - manually fix the conflicts
git status
git commit     									# just confirm the message
git mergetool --tool=							# 3. option

How to put things into the stash
********************************
git stash save "message about the stage"		# saves tmp work to allow to switch to different branch 
git stash list									# lists stashed things (in any branch available !!!)
git stash show stash@{0}						# shows the saved stash
git stash show -p stash@{0}						# shows the saved stash exactly (the code)
git stash pop stash@{0}							# pop up from the drawer and delete it from the stash
git stash apply	stash@{0}						# apply it and leaves a copy in the stash
git stash drop stash@{0}						# delete stash@{0} from the stash
git stash clear									# clear the stashes repository

How to Git remotes
******************
git remote
git remote -v
git remote add <alias> <url>
git remote rm <branch>
git push -u <git_hub_remote>

